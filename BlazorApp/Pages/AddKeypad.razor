@page "/keypad/add"
@inject IDbContextFactory<DbBensonbird25Context> ContextFactory

<PageTitle>Add Keypad</PageTitle>

<h3>Add Keypad</h3>

<KeypadForm Keypad="Keypad" 
    ExsistingDisplays="ExsistingDisplays" 
    ExsistingPasskeys="ExsistingPasskeys"
    LockedState="LockedState"
    OnSubmit="HandleSubmit"/>

@if(SuccessMessage is not null)
{
    <div class="alert alert-success">@SuccessMessage</div>
}

@if (FailureMessage is not null)
{
    <div class="alert alert-danger">@FailureMessage</div>
}


@code {
    public string? SuccessMessage { get; set; }
    public string? FailureMessage { get; set; }
    public Keypad? Keypad { get; set; }
    public List<Passkey>? ExsistingPasskeys { get; set; }
    public List<Display>? ExsistingDisplays { get; set; }
    public bool LockedState { get; set; }

    protected override async void OnInitialized()
    {
        var context = ContextFactory.CreateDbContext();

        ExsistingPasskeys = await context.Passkeys
                                .ToListAsync();

        ExsistingDisplays = await context.Displays
                                .Include(d => d.DisplayBtns)
                                .ThenInclude(db => db.Btn)
                                .ThenInclude(b => b.Color)
                                .ToListAsync();

        Keypad = new();

        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        FailureMessage = null;
        SuccessMessage = null;
    }

    private async Task HandleValidSubmit()
    {
        if (LockedState)
            return;

        LockedState = true;

        try
        {
            if(Keypad is not null)
            {
                using var context = ContextFactory.CreateDbContext();

                context.Keypads.Add(Keypad);
                await context.SaveChangesAsync();

                SuccessMessage = $"Keypad with this title: '{Keypad?.Display.Title}' Saved! Thank you";
                FailureMessage = null;

                Keypad = new();
            }
        }
        catch (Exception e)
        {
            FailureMessage = $"Keypad with this title: '{Keypad?.Display.Title}' Did not save! Something went wrong :(";
            Console.WriteLine(e.Message);
            SuccessMessage = null;
        }

        LockedState = false;
    }

    private async Task HandleSubmit(bool isValid)
    {
        if (isValid)
            await HandleValidSubmit();
        else
            HandleInvalidSubmit();
    }
}